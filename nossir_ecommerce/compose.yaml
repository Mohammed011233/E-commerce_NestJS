version: '3'

name: ecommerce

networks:
  app-net:
    driver: bridge
  kafka-net:

services:
  ###########################################################################
  # mongo database
  mongo:
    image: mongo:latest
    container_name: mongo
    restart: always
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${MONGO_INITDB_ROOT_USERNAME}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_INITDB_ROOT_PASSWORD}
    ports:
      - '0.0.0.0:27017:27017'
    networks:
      - app-net
    volumes:
      - type: volume
        source: MONGO_DATA
        target: /data/db
      - type: volume
        source: MONGO_CONFIG
        target: /data/configdb
      - ./init-mongo.js:/docker-entrypoint-initdb.d/init-mongo.js
  ###########################################################################

  ###########################################################################
  # mongo express
  mongo-express:
    image: mongo-express:latest
    restart: always
    container_name: mongo-express
    environment:
      ME_CONFIG_MONGODB_ADMINUSERNAME: ${CONFIG_MONGODB_ADMINUSERNAME}
      ME_CONFIG_MONGODB_ADMINPASSWORD: ${CONFIG_MONGODB_ADMINPASS}
      ME_CONFIG_MONGODB_SERVER: mongo
      ME_CONFIG_MONGODB_PORT: 27017
      ME_CONFIG_BASICAUTH_USERNAME: ${CONFIG_BASICAUTH_USERNAME}
      ME_CONFIG_BASICAUTH_PASSWORD: ${ME_CONFIG_BASICAUTH_PASSWORD}
    ports:
      - '0.0.0.0:8081:8081'
    networks:
      - app-net
    depends_on:
      - mongo
  

  #################### second try to config kafka and zookeeper containers from bitnami images 

  zookeeper:
    image: 'bitnami/zookeeper:3.8'
    container_name: zookeeper
    ports:
      - '2181:2181'
    environment:
      - ALLOW_ANONYMOUS_LOGIN=yes
    networks:
      - kafka-net
    volumes:
      - ~/kafka/data/zookeeper_data:/var/lib/zookeeper/data
      - ~/kafka/data/zookeeper_log:/var/lib/zookeeper/log

  kafka:
    image: 'bitnami/kafka:3.8.0'
    container_name: kafka
    user: root
    ports:
      - '9092:9092'
    environment:
    - KAFKA_ZOOKEEPER_CONNECT=zookeeper:2181
    - KAFKA_ADVERTISED_HOST_NAME=kafka
    - JMX_PORT=9090
    - KAFKA_ADVERTISED_PORT=9092   # Typically this is set to the port Kafka listens to
    - KAFKA_DELETE_TOPIC_ENABLE=true
    - KAFKA_LOG_RETENTION_HOURS=1
    - KAFKA_MESSAGE_MAX_BYTES=10000000
    - KAFKA_REPLICA_FETCH_MAX_BYTES=10000000
    - KAFKA_GROUP_MAX_SESSION_TIMEOUT_MS=60000
    - KAFKA_NUM_PARTITIONS=2
    - KAFKA_DELETE_RETENTION_MS=1000
      # - KAFKA_BROKER_ID=1
      # - KAFKA_LISTENERS=PLAINTEXT://:9092
      # - KAFKA_ADVERTISED_LISTENERS=PLAINTEXT://kafka:9092
      # - KAFKA_ZOOKEEPER_CONNECT=zookeeper:2181
      # - ALLOW_PLAINTEXT_LISTENER=yes
    volumes:
      - ./Kafka:/bitnami/kafka
    networks:
      - kafka-net
    depends_on:
      - zookeeper

  kafka-manager:
    container_name: kafka-manager
    image: hlebalbau/kafka-manager:1.3.3.16
    restart: on-failure
    depends_on:
      - kafka
      - zookeeper
    command: -Dconfig.file=/kafka-manager/conf/application.conf -Dapplication.home=/kafkamanager
    environment:
      - ZK_HOSTS=zookeeper:2181  # Connect directly to Zookeeper container
      - APPLICATION_SECRET=letmein
    ports:
      - "0.0.0.0:9000:9000"
    networks:
      - kafka-net
    
  kafka-ui:
    container_name: kafka-ui
    image: provectuslabs/kafka-ui:v0.7.2
    restart: on-failure
    depends_on:
      - zookeeper
      - kafka
    ports:
      - "8090:8080"  # Access Kafka UI on localhost:8090
    environment:
      KAFKA_CLUSTERS_0_NAME: local
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:9092  # Match Kafka's advertised port
      KAFKA_CLUSTERS_0_ZOOKEEPER: zookeeper:2181
      # KAFKA_CLUSTERS_0_PROPERTIES_SECURITY_PROTOCOL: PLAINTEXT
    networks:
      - kafka-net
    # network_mode: "host"

volumes:
  mono-node-modules: null
  MONGO_DATA:
    name: MONGO_DATA
  MONGO_CONFIG:
    name: MONGO_CONFIG





########################### Zookeeper , kafka and kafka ui ################################################
  # zookeeper:
  #   container_name: zookeeper
  #   image: zookeeper:3.4
  #   restart: on-failure
  #   volumes:
  #     - "./zookeeper/data:/data"
  #     - "./zookeeper/logs:/datalog"
  #   ports:
  #     - "0.0.0.0:2181:2181"

  # kafka:
  #   container_name: kafka
  #   image: wurstmeister/kafka:1.0.0
  #   restart: on-failure
  #   depends_on:
  #     - zookeeper
  #   volumes:
  #     - /var/run/docker.sock:/var/run/docker.sock
  #   environment:
  #     - KAFKA_ZOOKEEPER_CONNECT=zookeeper:2181
  #     - KAFKA_ADVERTISED_HOST_NAME=kafka
  #     - JMX_PORT=8082
  #     - KAFKA_ADVERTISED_PORT=9082   # Typically this is set to the port Kafka listens to
  #     - KAFKA_DELETE_TOPIC_ENABLE=true
  #     - KAFKA_LOG_RETENTION_HOURS=1
  #     - KAFKA_MESSAGE_MAX_BYTES=10000000
  #     - KAFKA_REPLICA_FETCH_MAX_BYTES=10000000
  #     - KAFKA_GROUP_MAX_SESSION_TIMEOUT_MS=60000
  #     - KAFKA_NUM_PARTITIONS=2
  #     - KAFKA_DELETE_RETENTION_MS=1000
  #   ports:
  #     - "0.0.0.0:9082:9082"  # Kafka listens on this port


####

# # Comments are provided throughout this file to help you get started.
# # If you need more help, visit the Docker Compose reference guide at
# # https://docs.docker.com/go/compose-spec-reference/

# # Here the instructions define your application as a service called "server".
# # This service is built from the Dockerfile in the current directory.
# # You can add other services your application may depend on here, such as a
# # database or a cache. For examples, see the Awesome Compose repository:
# # https://github.com/docker/awesome-compose
# services:
#   server:
#     build:
#       context: .
#     environment:
#       NODE_ENV: production
#     ports:
#       - 8080:8080

# # The commented out section below is an example of how to define a PostgreSQL
# # database that your application can use. `depends_on` tells Docker Compose to
# # start the database before your application. The `db-data` volume persists the
# # database data between container restarts. The `db-password` secret is used
# # to set the database password. You must create `db/password.txt` and add
# # a password of your choosing to it before running `docker-compose up`.
# #     depends_on:
# #       db:
# #         condition: service_healthy
# #   db:
# #     image: postgres
# #     restart: always
# #     user: postgres
# #     secrets:
# #       - db-password
# #     volumes:
# #       - db-data:/var/lib/postgresql/data
# #     environment:
# #       - POSTGRES_DB=example
# #       - POSTGRES_PASSWORD_FILE=/run/secrets/db-password
# #     expose:
# #       - 5432
# #     healthcheck:
# #       test: [ "CMD", "pg_isready" ]
# #       interval: 10s
# #       timeout: 5s
# #       retries: 5
# # volumes:
# #   db-data:
# # secrets:
# #   db-password:
# #     file: db/password.txt

